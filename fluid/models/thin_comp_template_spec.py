# coding: utf-8

"""
    fluid

    client for fluid  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fluid.configuration import Configuration


class ThinCompTemplateSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'env': 'list[V1EnvVar]',
        'image': 'str',
        'image_pull_policy': 'str',
        'image_tag': 'str',
        'liveness_probe': 'V1Probe',
        'network_mode': 'str',
        'node_selector': 'dict(str, str)',
        'ports': 'list[V1ContainerPort]',
        'readiness_probe': 'V1Probe',
        'replicas': 'int',
        'resources': 'V1ResourceRequirements',
        'volume_mounts': 'list[V1VolumeMount]'
    }

    attribute_map = {
        'enabled': 'enabled',
        'env': 'env',
        'image': 'image',
        'image_pull_policy': 'imagePullPolicy',
        'image_tag': 'imageTag',
        'liveness_probe': 'livenessProbe',
        'network_mode': 'networkMode',
        'node_selector': 'nodeSelector',
        'ports': 'ports',
        'readiness_probe': 'readinessProbe',
        'replicas': 'replicas',
        'resources': 'resources',
        'volume_mounts': 'volumeMounts'
    }

    def __init__(self, enabled=None, env=None, image=None, image_pull_policy=None, image_tag=None, liveness_probe=None, network_mode=None, node_selector=None, ports=None, readiness_probe=None, replicas=None, resources=None, volume_mounts=None, local_vars_configuration=None):  # noqa: E501
        """ThinCompTemplateSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._env = None
        self._image = None
        self._image_pull_policy = None
        self._image_tag = None
        self._liveness_probe = None
        self._network_mode = None
        self._node_selector = None
        self._ports = None
        self._readiness_probe = None
        self._replicas = None
        self._resources = None
        self._volume_mounts = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if env is not None:
            self.env = env
        if image is not None:
            self.image = image
        if image_pull_policy is not None:
            self.image_pull_policy = image_pull_policy
        if image_tag is not None:
            self.image_tag = image_tag
        if liveness_probe is not None:
            self.liveness_probe = liveness_probe
        if network_mode is not None:
            self.network_mode = network_mode
        if node_selector is not None:
            self.node_selector = node_selector
        if ports is not None:
            self.ports = ports
        if readiness_probe is not None:
            self.readiness_probe = readiness_probe
        if replicas is not None:
            self.replicas = replicas
        if resources is not None:
            self.resources = resources
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts

    @property
    def enabled(self):
        """Gets the enabled of this ThinCompTemplateSpec.  # noqa: E501

        Enabled or Disabled for the components.  # noqa: E501

        :return: The enabled of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ThinCompTemplateSpec.

        Enabled or Disabled for the components.  # noqa: E501

        :param enabled: The enabled of this ThinCompTemplateSpec.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def env(self):
        """Gets the env of this ThinCompTemplateSpec.  # noqa: E501

        Environment variables that will be used by thinRuntime component.  # noqa: E501

        :return: The env of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this ThinCompTemplateSpec.

        Environment variables that will be used by thinRuntime component.  # noqa: E501

        :param env: The env of this ThinCompTemplateSpec.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def image(self):
        """Gets the image of this ThinCompTemplateSpec.  # noqa: E501

        Image for thinRuntime fuse  # noqa: E501

        :return: The image of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ThinCompTemplateSpec.

        Image for thinRuntime fuse  # noqa: E501

        :param image: The image of this ThinCompTemplateSpec.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_pull_policy(self):
        """Gets the image_pull_policy of this ThinCompTemplateSpec.  # noqa: E501

        One of the three policies: `Always`, `IfNotPresent`, `Never`  # noqa: E501

        :return: The image_pull_policy of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_pull_policy

    @image_pull_policy.setter
    def image_pull_policy(self, image_pull_policy):
        """Sets the image_pull_policy of this ThinCompTemplateSpec.

        One of the three policies: `Always`, `IfNotPresent`, `Never`  # noqa: E501

        :param image_pull_policy: The image_pull_policy of this ThinCompTemplateSpec.  # noqa: E501
        :type: str
        """

        self._image_pull_policy = image_pull_policy

    @property
    def image_tag(self):
        """Gets the image_tag of this ThinCompTemplateSpec.  # noqa: E501

        Image for thinRuntime fuse  # noqa: E501

        :return: The image_tag of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this ThinCompTemplateSpec.

        Image for thinRuntime fuse  # noqa: E501

        :param image_tag: The image_tag of this ThinCompTemplateSpec.  # noqa: E501
        :type: str
        """

        self._image_tag = image_tag

    @property
    def liveness_probe(self):
        """Gets the liveness_probe of this ThinCompTemplateSpec.  # noqa: E501


        :return: The liveness_probe of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: V1Probe
        """
        return self._liveness_probe

    @liveness_probe.setter
    def liveness_probe(self, liveness_probe):
        """Sets the liveness_probe of this ThinCompTemplateSpec.


        :param liveness_probe: The liveness_probe of this ThinCompTemplateSpec.  # noqa: E501
        :type: V1Probe
        """

        self._liveness_probe = liveness_probe

    @property
    def network_mode(self):
        """Gets the network_mode of this ThinCompTemplateSpec.  # noqa: E501

        Whether to use hostnetwork or not  # noqa: E501

        :return: The network_mode of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: str
        """
        return self._network_mode

    @network_mode.setter
    def network_mode(self, network_mode):
        """Sets the network_mode of this ThinCompTemplateSpec.

        Whether to use hostnetwork or not  # noqa: E501

        :param network_mode: The network_mode of this ThinCompTemplateSpec.  # noqa: E501
        :type: str
        """

        self._network_mode = network_mode

    @property
    def node_selector(self):
        """Gets the node_selector of this ThinCompTemplateSpec.  # noqa: E501

        NodeSelector is a selector  # noqa: E501

        :return: The node_selector of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this ThinCompTemplateSpec.

        NodeSelector is a selector  # noqa: E501

        :param node_selector: The node_selector of this ThinCompTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def ports(self):
        """Gets the ports of this ThinCompTemplateSpec.  # noqa: E501

        Ports used thinRuntime  # noqa: E501

        :return: The ports of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: list[V1ContainerPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ThinCompTemplateSpec.

        Ports used thinRuntime  # noqa: E501

        :param ports: The ports of this ThinCompTemplateSpec.  # noqa: E501
        :type: list[V1ContainerPort]
        """

        self._ports = ports

    @property
    def readiness_probe(self):
        """Gets the readiness_probe of this ThinCompTemplateSpec.  # noqa: E501


        :return: The readiness_probe of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: V1Probe
        """
        return self._readiness_probe

    @readiness_probe.setter
    def readiness_probe(self, readiness_probe):
        """Sets the readiness_probe of this ThinCompTemplateSpec.


        :param readiness_probe: The readiness_probe of this ThinCompTemplateSpec.  # noqa: E501
        :type: V1Probe
        """

        self._readiness_probe = readiness_probe

    @property
    def replicas(self):
        """Gets the replicas of this ThinCompTemplateSpec.  # noqa: E501

        Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster  # noqa: E501

        :return: The replicas of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this ThinCompTemplateSpec.

        Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster  # noqa: E501

        :param replicas: The replicas of this ThinCompTemplateSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def resources(self):
        """Gets the resources of this ThinCompTemplateSpec.  # noqa: E501


        :return: The resources of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: V1ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ThinCompTemplateSpec.


        :param resources: The resources of this ThinCompTemplateSpec.  # noqa: E501
        :type: V1ResourceRequirements
        """

        self._resources = resources

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ThinCompTemplateSpec.  # noqa: E501

        VolumeMounts specifies the volumes listed in \".spec.volumes\" to mount into runtime component's filesystem.  # noqa: E501

        :return: The volume_mounts of this ThinCompTemplateSpec.  # noqa: E501
        :rtype: list[V1VolumeMount]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ThinCompTemplateSpec.

        VolumeMounts specifies the volumes listed in \".spec.volumes\" to mount into runtime component's filesystem.  # noqa: E501

        :param volume_mounts: The volume_mounts of this ThinCompTemplateSpec.  # noqa: E501
        :type: list[V1VolumeMount]
        """

        self._volume_mounts = volume_mounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThinCompTemplateSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ThinCompTemplateSpec):
            return True

        return self.to_dict() != other.to_dict()
