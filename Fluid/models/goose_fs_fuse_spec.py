# coding: utf-8

"""
    fluid

    client for fluid  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fluid.configuration import Configuration


class GooseFSFuseSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotations': 'dict(str, str)',
        'args': 'list[str]',
        'clean_policy': 'str',
        'env': 'dict(str, str)',
        '_global': 'bool',
        'image': 'str',
        'image_pull_policy': 'str',
        'image_tag': 'str',
        'jvm_options': 'list[str]',
        'node_selector': 'dict(str, str)',
        'properties': 'dict(str, str)',
        'resources': 'V1ResourceRequirements'
    }

    attribute_map = {
        'annotations': 'annotations',
        'args': 'args',
        'clean_policy': 'cleanPolicy',
        'env': 'env',
        '_global': 'global',
        'image': 'image',
        'image_pull_policy': 'imagePullPolicy',
        'image_tag': 'imageTag',
        'jvm_options': 'jvmOptions',
        'node_selector': 'nodeSelector',
        'properties': 'properties',
        'resources': 'resources'
    }

    def __init__(self, annotations=None, args=None, clean_policy=None, env=None, _global=None, image=None, image_pull_policy=None, image_tag=None, jvm_options=None, node_selector=None, properties=None, resources=None, local_vars_configuration=None):  # noqa: E501
        """GooseFSFuseSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._annotations = None
        self._args = None
        self._clean_policy = None
        self._env = None
        self.__global = None
        self._image = None
        self._image_pull_policy = None
        self._image_tag = None
        self._jvm_options = None
        self._node_selector = None
        self._properties = None
        self._resources = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if args is not None:
            self.args = args
        if clean_policy is not None:
            self.clean_policy = clean_policy
        if env is not None:
            self.env = env
        if _global is not None:
            self._global = _global
        if image is not None:
            self.image = image
        if image_pull_policy is not None:
            self.image_pull_policy = image_pull_policy
        if image_tag is not None:
            self.image_tag = image_tag
        if jvm_options is not None:
            self.jvm_options = jvm_options
        if node_selector is not None:
            self.node_selector = node_selector
        if properties is not None:
            self.properties = properties
        if resources is not None:
            self.resources = resources

    @property
    def annotations(self):
        """Gets the annotations of this GooseFSFuseSpec.  # noqa: E501

        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations  # noqa: E501

        :return: The annotations of this GooseFSFuseSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this GooseFSFuseSpec.

        Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations  # noqa: E501

        :param annotations: The annotations of this GooseFSFuseSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def args(self):
        """Gets the args of this GooseFSFuseSpec.  # noqa: E501

        Arguments that will be passed to GooseFS Fuse  # noqa: E501

        :return: The args of this GooseFSFuseSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this GooseFSFuseSpec.

        Arguments that will be passed to GooseFS Fuse  # noqa: E501

        :param args: The args of this GooseFSFuseSpec.  # noqa: E501
        :type: list[str]
        """

        self._args = args

    @property
    def clean_policy(self):
        """Gets the clean_policy of this GooseFSFuseSpec.  # noqa: E501

        CleanPolicy decides when to clean GooseFS Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once th fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnRuntimeDeleted  # noqa: E501

        :return: The clean_policy of this GooseFSFuseSpec.  # noqa: E501
        :rtype: str
        """
        return self._clean_policy

    @clean_policy.setter
    def clean_policy(self, clean_policy):
        """Sets the clean_policy of this GooseFSFuseSpec.

        CleanPolicy decides when to clean GooseFS Fuse pods. Currently Fluid supports two policies: OnDemand and OnRuntimeDeleted OnDemand cleans fuse pod once th fuse pod on some node is not needed OnRuntimeDeleted cleans fuse pod only when the cache runtime is deleted Defaults to OnRuntimeDeleted  # noqa: E501

        :param clean_policy: The clean_policy of this GooseFSFuseSpec.  # noqa: E501
        :type: str
        """

        self._clean_policy = clean_policy

    @property
    def env(self):
        """Gets the env of this GooseFSFuseSpec.  # noqa: E501

        Environment variables that will be used by GooseFS Fuse  # noqa: E501

        :return: The env of this GooseFSFuseSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this GooseFSFuseSpec.

        Environment variables that will be used by GooseFS Fuse  # noqa: E501

        :param env: The env of this GooseFSFuseSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._env = env

    @property
    def _global(self):
        """Gets the _global of this GooseFSFuseSpec.  # noqa: E501

        If the fuse client should be deployed in global mode, otherwise the affinity should be considered  # noqa: E501

        :return: The _global of this GooseFSFuseSpec.  # noqa: E501
        :rtype: bool
        """
        return self.__global

    @_global.setter
    def _global(self, _global):
        """Sets the _global of this GooseFSFuseSpec.

        If the fuse client should be deployed in global mode, otherwise the affinity should be considered  # noqa: E501

        :param _global: The _global of this GooseFSFuseSpec.  # noqa: E501
        :type: bool
        """

        self.__global = _global

    @property
    def image(self):
        """Gets the image of this GooseFSFuseSpec.  # noqa: E501

        Image for GooseFS Fuse(e.g. goosefs/goosefs-fuse)  # noqa: E501

        :return: The image of this GooseFSFuseSpec.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this GooseFSFuseSpec.

        Image for GooseFS Fuse(e.g. goosefs/goosefs-fuse)  # noqa: E501

        :param image: The image of this GooseFSFuseSpec.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_pull_policy(self):
        """Gets the image_pull_policy of this GooseFSFuseSpec.  # noqa: E501

        One of the three policies: `Always`, `IfNotPresent`, `Never`  # noqa: E501

        :return: The image_pull_policy of this GooseFSFuseSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_pull_policy

    @image_pull_policy.setter
    def image_pull_policy(self, image_pull_policy):
        """Sets the image_pull_policy of this GooseFSFuseSpec.

        One of the three policies: `Always`, `IfNotPresent`, `Never`  # noqa: E501

        :param image_pull_policy: The image_pull_policy of this GooseFSFuseSpec.  # noqa: E501
        :type: str
        """

        self._image_pull_policy = image_pull_policy

    @property
    def image_tag(self):
        """Gets the image_tag of this GooseFSFuseSpec.  # noqa: E501

        Image Tag for GooseFS Fuse(e.g. v1.0.1)  # noqa: E501

        :return: The image_tag of this GooseFSFuseSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this GooseFSFuseSpec.

        Image Tag for GooseFS Fuse(e.g. v1.0.1)  # noqa: E501

        :param image_tag: The image_tag of this GooseFSFuseSpec.  # noqa: E501
        :type: str
        """

        self._image_tag = image_tag

    @property
    def jvm_options(self):
        """Gets the jvm_options of this GooseFSFuseSpec.  # noqa: E501

        Options for JVM  # noqa: E501

        :return: The jvm_options of this GooseFSFuseSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._jvm_options

    @jvm_options.setter
    def jvm_options(self, jvm_options):
        """Sets the jvm_options of this GooseFSFuseSpec.

        Options for JVM  # noqa: E501

        :param jvm_options: The jvm_options of this GooseFSFuseSpec.  # noqa: E501
        :type: list[str]
        """

        self._jvm_options = jvm_options

    @property
    def node_selector(self):
        """Gets the node_selector of this GooseFSFuseSpec.  # noqa: E501

        NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled  # noqa: E501

        :return: The node_selector of this GooseFSFuseSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this GooseFSFuseSpec.

        NodeSelector is a selector which must be true for the fuse client to fit on a node, this option only effect when global is enabled  # noqa: E501

        :param node_selector: The node_selector of this GooseFSFuseSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def properties(self):
        """Gets the properties of this GooseFSFuseSpec.  # noqa: E501

        Configurable properties for the GOOSEFS component. <br> Refer to <a href=\"https://cloud.tencent.com/document/product/436/56415\">GOOSEFS Configuration Properties</a> for more info  # noqa: E501

        :return: The properties of this GooseFSFuseSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this GooseFSFuseSpec.

        Configurable properties for the GOOSEFS component. <br> Refer to <a href=\"https://cloud.tencent.com/document/product/436/56415\">GOOSEFS Configuration Properties</a> for more info  # noqa: E501

        :param properties: The properties of this GooseFSFuseSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def resources(self):
        """Gets the resources of this GooseFSFuseSpec.  # noqa: E501


        :return: The resources of this GooseFSFuseSpec.  # noqa: E501
        :rtype: V1ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this GooseFSFuseSpec.


        :param resources: The resources of this GooseFSFuseSpec.  # noqa: E501
        :type: V1ResourceRequirements
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GooseFSFuseSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GooseFSFuseSpec):
            return True

        return self.to_dict() != other.to_dict()
