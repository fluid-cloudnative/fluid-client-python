# coding: utf-8

"""
    fluid

    client for fluid  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fluid.configuration import Configuration


class Runtime(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'category': 'str',
        'master_replicas': 'int',
        'name': 'str',
        'namespace': 'str',
        'type': 'str'
    }

    attribute_map = {
        'category': 'category',
        'master_replicas': 'masterReplicas',
        'name': 'name',
        'namespace': 'namespace',
        'type': 'type'
    }

    def __init__(self, category=None, master_replicas=None, name=None, namespace=None, type=None, local_vars_configuration=None):  # noqa: E501
        """Runtime - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._category = None
        self._master_replicas = None
        self._name = None
        self._namespace = None
        self._type = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if master_replicas is not None:
            self.master_replicas = master_replicas
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if type is not None:
            self.type = type

    @property
    def category(self):
        """Gets the category of this Runtime.  # noqa: E501

        Category the runtime object belongs to (e.g. Accelerate)  # noqa: E501

        :return: The category of this Runtime.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Runtime.

        Category the runtime object belongs to (e.g. Accelerate)  # noqa: E501

        :param category: The category of this Runtime.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def master_replicas(self):
        """Gets the master_replicas of this Runtime.  # noqa: E501

        Runtime master replicas  # noqa: E501

        :return: The master_replicas of this Runtime.  # noqa: E501
        :rtype: int
        """
        return self._master_replicas

    @master_replicas.setter
    def master_replicas(self, master_replicas):
        """Sets the master_replicas of this Runtime.

        Runtime master replicas  # noqa: E501

        :param master_replicas: The master_replicas of this Runtime.  # noqa: E501
        :type: int
        """

        self._master_replicas = master_replicas

    @property
    def name(self):
        """Gets the name of this Runtime.  # noqa: E501

        Name of the runtime object  # noqa: E501

        :return: The name of this Runtime.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Runtime.

        Name of the runtime object  # noqa: E501

        :param name: The name of this Runtime.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this Runtime.  # noqa: E501

        Namespace of the runtime object  # noqa: E501

        :return: The namespace of this Runtime.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Runtime.

        Namespace of the runtime object  # noqa: E501

        :param namespace: The namespace of this Runtime.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def type(self):
        """Gets the type of this Runtime.  # noqa: E501

        Runtime object's type (e.g. Alluxio)  # noqa: E501

        :return: The type of this Runtime.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Runtime.

        Runtime object's type (e.g. Alluxio)  # noqa: E501

        :param type: The type of this Runtime.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Runtime):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Runtime):
            return True

        return self.to_dict() != other.to_dict()
