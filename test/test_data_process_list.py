# coding: utf-8

"""
    fluid

    client for fluid  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import fluid
from fluid.models.data_process_list import DataProcessList  # noqa: E501
from fluid.rest import ApiException

class TestDataProcessList(unittest.TestCase):
    """DataProcessList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test DataProcessList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = fluid.models.data_process_list.DataProcessList()  # noqa: E501
        if include_optional :
            return DataProcessList(
                api_version = '0', 
                items = [
                    fluid.models./data_process..DataProcess(
                        api_version = '0', 
                        kind = '0', 
                        metadata = None, 
                        spec = fluid.models./data_process_spec..DataProcessSpec(
                            dataset = fluid.models./target_dataset_with_mount_path..TargetDatasetWithMountPath(
                                mount_path = '0', 
                                name = '0', 
                                namespace = '0', 
                                sub_path = '0', ), 
                            processor = fluid.models./processor..Processor(
                                job = fluid.models./job_processor..JobProcessor(
                                    pod_spec = None, ), 
                                pod_metadata = fluid.models./pod_metadata..PodMetadata(
                                    annotations = {
                                        'key' : '0'
                                        }, 
                                    labels = {
                                        'key' : '0'
                                        }, ), 
                                script = fluid.models./script_processor..ScriptProcessor(
                                    command = [
                                        '0'
                                        ], 
                                    env = [
                                        None
                                        ], 
                                    image = '0', 
                                    image_pull_policy = '0', 
                                    image_tag = '0', 
                                    resources = None, 
                                    restart_policy = '0', 
                                    source = '0', 
                                    volume_mounts = [
                                        None
                                        ], 
                                    volumes = [
                                        None
                                        ], ), 
                                service_account_name = '0', ), 
                            run_after = fluid.models./operation_ref..OperationRef(
                                api_version = '0', 
                                kind = '0', 
                                name = '0', 
                                namespace = '0', ), 
                            ttl_seconds_after_finished = 56, ), 
                        status = fluid.models./operation_status..OperationStatus(
                            conditions = [
                                fluid.models./condition..Condition(
                                    last_probe_time = None, 
                                    last_transition_time = None, 
                                    message = '0', 
                                    reason = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            duration = '0', 
                            infos = {
                                'key' : '0'
                                }, 
                            last_schedule_time = None, 
                            last_successful_time = None, 
                            phase = '0', 
                            waiting_for = fluid.models./waiting_status..WaitingStatus(
                                operation_complete = True, ), ), )
                    ], 
                kind = '0', 
                metadata = None
            )
        else :
            return DataProcessList(
                items = [
                    fluid.models./data_process..DataProcess(
                        api_version = '0', 
                        kind = '0', 
                        metadata = None, 
                        spec = fluid.models./data_process_spec..DataProcessSpec(
                            dataset = fluid.models./target_dataset_with_mount_path..TargetDatasetWithMountPath(
                                mount_path = '0', 
                                name = '0', 
                                namespace = '0', 
                                sub_path = '0', ), 
                            processor = fluid.models./processor..Processor(
                                job = fluid.models./job_processor..JobProcessor(
                                    pod_spec = None, ), 
                                pod_metadata = fluid.models./pod_metadata..PodMetadata(
                                    annotations = {
                                        'key' : '0'
                                        }, 
                                    labels = {
                                        'key' : '0'
                                        }, ), 
                                script = fluid.models./script_processor..ScriptProcessor(
                                    command = [
                                        '0'
                                        ], 
                                    env = [
                                        None
                                        ], 
                                    image = '0', 
                                    image_pull_policy = '0', 
                                    image_tag = '0', 
                                    resources = None, 
                                    restart_policy = '0', 
                                    source = '0', 
                                    volume_mounts = [
                                        None
                                        ], 
                                    volumes = [
                                        None
                                        ], ), 
                                service_account_name = '0', ), 
                            run_after = fluid.models./operation_ref..OperationRef(
                                api_version = '0', 
                                kind = '0', 
                                name = '0', 
                                namespace = '0', ), 
                            ttl_seconds_after_finished = 56, ), 
                        status = fluid.models./operation_status..OperationStatus(
                            conditions = [
                                fluid.models./condition..Condition(
                                    last_probe_time = None, 
                                    last_transition_time = None, 
                                    message = '0', 
                                    reason = '0', 
                                    status = '0', 
                                    type = '0', )
                                ], 
                            duration = '0', 
                            infos = {
                                'key' : '0'
                                }, 
                            last_schedule_time = None, 
                            last_successful_time = None, 
                            phase = '0', 
                            waiting_for = fluid.models./waiting_status..WaitingStatus(
                                operation_complete = True, ), ), )
                    ],
        )

    def testDataProcessList(self):
        """Test DataProcessList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
