# coding: utf-8

"""
    fluid

    client for fluid  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Fluid.io.fluid-cloudnative.module.target_dataset import TargetDataset  # noqa: F401,E501
from Fluid.io.fluid-cloudnative.module.target_path import TargetPath  # noqa: F401,E501


class DataLoadSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset': 'TargetDataset',
        'load_metadata': 'bool',
        'target': 'list[TargetPath]'
    }

    attribute_map = {
        'dataset': 'dataset',
        'load_metadata': 'loadMetadata',
        'target': 'target'
    }

    def __init__(self, dataset=None, load_metadata=None, target=None):  # noqa: E501
        """DataLoadSpec - a model defined in Swagger"""  # noqa: E501

        self._dataset = None
        self._load_metadata = None
        self._target = None
        self.discriminator = None

        if dataset is not None:
            self.dataset = dataset
        if load_metadata is not None:
            self.load_metadata = load_metadata
        if target is not None:
            self.target = target

    @property
    def dataset(self):
        """Gets the dataset of this DataLoadSpec.  # noqa: E501

        Dataset defines the target dataset of the DataLoad  # noqa: E501

        :return: The dataset of this DataLoadSpec.  # noqa: E501
        :rtype: TargetDataset
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DataLoadSpec.

        Dataset defines the target dataset of the DataLoad  # noqa: E501

        :param dataset: The dataset of this DataLoadSpec.  # noqa: E501
        :type: TargetDataset
        """

        self._dataset = dataset

    @property
    def load_metadata(self):
        """Gets the load_metadata of this DataLoadSpec.  # noqa: E501

        LoadMetadata specifies if the dataload job should load metadata  # noqa: E501

        :return: The load_metadata of this DataLoadSpec.  # noqa: E501
        :rtype: bool
        """
        return self._load_metadata

    @load_metadata.setter
    def load_metadata(self, load_metadata):
        """Sets the load_metadata of this DataLoadSpec.

        LoadMetadata specifies if the dataload job should load metadata  # noqa: E501

        :param load_metadata: The load_metadata of this DataLoadSpec.  # noqa: E501
        :type: bool
        """

        self._load_metadata = load_metadata

    @property
    def target(self):
        """Gets the target of this DataLoadSpec.  # noqa: E501

        Target defines target paths that needs to be loaded  # noqa: E501

        :return: The target of this DataLoadSpec.  # noqa: E501
        :rtype: list[TargetPath]
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this DataLoadSpec.

        Target defines target paths that needs to be loaded  # noqa: E501

        :param target: The target of this DataLoadSpec.  # noqa: E501
        :type: list[TargetPath]
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataLoadSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataLoadSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
