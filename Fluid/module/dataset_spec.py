# -*- coding: utf-8 -*-


import pprint

import six
from fluid.configuration import Configuration


class DatasetSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_modes': 'list[str]',
        'data_restore_location': 'DataRestoreLocation',
        'mounts': 'list[Mount]',
        'node_affinity': 'CacheableNodeAffinity',
        'owner': 'User',
        'placement': 'str',
        'runtimes': 'list[Runtime]',
        'tolerations': 'list[V1Toleration]'
    }

    attribute_map = {
        'access_modes': 'accessModes',
        'data_restore_location': 'dataRestoreLocation',
        'mounts': 'mounts',
        'node_affinity': 'nodeAffinity',
        'owner': 'owner',
        'placement': 'placement',
        'runtimes': 'runtimes',
        'tolerations': 'tolerations'
    }

    def __init__(self, access_modes=None, data_restore_location=None, mounts=None, node_affinity=None, owner=None, placement=None, runtimes=None, tolerations=None, _configuration=None):  # noqa: E501
        """DatasetSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_modes = None
        self._data_restore_location = None
        self._mounts = None
        self._node_affinity = None
        self._owner = None
        self._placement = None
        self._runtimes = None
        self._tolerations = None
        self.discriminator = None

        if access_modes is not None:
            self.access_modes = access_modes
        if data_restore_location is not None:
            self.data_restore_location = data_restore_location
        if mounts is not None:
            self.mounts = mounts
        if node_affinity is not None:
            self.node_affinity = node_affinity
        if owner is not None:
            self.owner = owner
        if placement is not None:
            self.placement = placement
        if runtimes is not None:
            self.runtimes = runtimes
        if tolerations is not None:
            self.tolerations = tolerations

    @property
    def access_modes(self):
        """Gets the access_modes of this DatasetSpec.  # noqa: E501

        AccessModes contains all ways the volume backing the PVC can be mounted  # noqa: E501

        :return: The access_modes of this DatasetSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._access_modes

    @access_modes.setter
    def access_modes(self, access_modes):
        """Sets the access_modes of this DatasetSpec.

        AccessModes contains all ways the volume backing the PVC can be mounted  # noqa: E501

        :param access_modes: The access_modes of this DatasetSpec.  # noqa: E501
        :type: list[str]
        """

        self._access_modes = access_modes

    @property
    def data_restore_location(self):
        """Gets the data_restore_location of this DatasetSpec.  # noqa: E501

        DataRestoreLocation is the location to load data of dataset  been backuped  # noqa: E501

        :return: The data_restore_location of this DatasetSpec.  # noqa: E501
        :rtype: DataRestoreLocation
        """
        return self._data_restore_location

    @data_restore_location.setter
    def data_restore_location(self, data_restore_location):
        """Sets the data_restore_location of this DatasetSpec.

        DataRestoreLocation is the location to load data of dataset  been backuped  # noqa: E501

        :param data_restore_location: The data_restore_location of this DatasetSpec.  # noqa: E501
        :type: DataRestoreLocation
        """

        self._data_restore_location = data_restore_location

    @property
    def mounts(self):
        """Gets the mounts of this DatasetSpec.  # noqa: E501

        Mount Points to be mounted on Alluxio.  # noqa: E501

        :return: The mounts of this DatasetSpec.  # noqa: E501
        :rtype: list[Mount]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts):
        """Sets the mounts of this DatasetSpec.

        Mount Points to be mounted on Alluxio.  # noqa: E501

        :param mounts: The mounts of this DatasetSpec.  # noqa: E501
        :type: list[Mount]
        """

        self._mounts = mounts

    @property
    def node_affinity(self):
        """Gets the node_affinity of this DatasetSpec.  # noqa: E501

        NodeAffinity defines constraints that limit what nodes this dataset can be cached to. This field influences the scheduling of pods that use the cached dataset.  # noqa: E501

        :return: The node_affinity of this DatasetSpec.  # noqa: E501
        :rtype: CacheableNodeAffinity
        """
        return self._node_affinity

    @node_affinity.setter
    def node_affinity(self, node_affinity):
        """Sets the node_affinity of this DatasetSpec.

        NodeAffinity defines constraints that limit what nodes this dataset can be cached to. This field influences the scheduling of pods that use the cached dataset.  # noqa: E501

        :param node_affinity: The node_affinity of this DatasetSpec.  # noqa: E501
        :type: CacheableNodeAffinity
        """

        self._node_affinity = node_affinity

    @property
    def owner(self):
        """Gets the owner of this DatasetSpec.  # noqa: E501

        The owner of the dataset  # noqa: E501

        :return: The owner of this DatasetSpec.  # noqa: E501
        :rtype: User
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DatasetSpec.

        The owner of the dataset  # noqa: E501

        :param owner: The owner of this DatasetSpec.  # noqa: E501
        :type: User
        """

        self._owner = owner

    @property
    def placement(self):
        """Gets the placement of this DatasetSpec.  # noqa: E501

        Manage switch for opening Multiple datasets single node deployment or not  # noqa: E501

        :return: The placement of this DatasetSpec.  # noqa: E501
        :rtype: str
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """Sets the placement of this DatasetSpec.

        Manage switch for opening Multiple datasets single node deployment or not  # noqa: E501

        :param placement: The placement of this DatasetSpec.  # noqa: E501
        :type: str
        """

        self._placement = placement

    @property
    def runtimes(self):
        """Gets the runtimes of this DatasetSpec.  # noqa: E501

        Runtimes for supporting dataset (e.g. AlluxioRuntime)  # noqa: E501

        :return: The runtimes of this DatasetSpec.  # noqa: E501
        :rtype: list[Runtime]
        """
        return self._runtimes

    @runtimes.setter
    def runtimes(self, runtimes):
        """Sets the runtimes of this DatasetSpec.

        Runtimes for supporting dataset (e.g. AlluxioRuntime)  # noqa: E501

        :param runtimes: The runtimes of this DatasetSpec.  # noqa: E501
        :type: list[Runtime]
        """

        self._runtimes = runtimes

    @property
    def tolerations(self):
        """Gets the tolerations of this DatasetSpec.  # noqa: E501

        If specified, the pod's tolerations.  # noqa: E501

        :return: The tolerations of this DatasetSpec.  # noqa: E501
        :rtype: list[V1Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this DatasetSpec.

        If specified, the pod's tolerations.  # noqa: E501

        :param tolerations: The tolerations of this DatasetSpec.  # noqa: E501
        :type: list[V1Toleration]
        """

        self._tolerations = tolerations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DatasetSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatasetSpec):
            return True

        return self.to_dict() != other.to_dict()
