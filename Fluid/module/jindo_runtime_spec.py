# -*- coding: utf-8 -*-


import pprint

import six
from fluid.configuration import Configuration


class JindoRuntimeSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fuse': 'JindoFuseSpec',
        'hadoop_config': 'str',
        'jindo_version': 'VersionSpec',
        'labels': 'dict(str, str)',
        'log_config': 'dict(str, str)',
        'master': 'JindoCompTemplateSpec',
        'networkmode': 'str',
        'properties': 'dict(str, str)',
        'replicas': 'int',
        'run_as': 'User',
        'secret': 'str',
        'tieredstore': 'TieredStore',
        'user': 'str',
        'worker': 'JindoCompTemplateSpec'
    }

    attribute_map = {
        'fuse': 'fuse',
        'hadoop_config': 'hadoopConfig',
        'jindo_version': 'jindoVersion',
        'labels': 'labels',
        'log_config': 'logConfig',
        'master': 'master',
        'networkmode': 'networkmode',
        'properties': 'properties',
        'replicas': 'replicas',
        'run_as': 'runAs',
        'secret': 'secret',
        'tieredstore': 'tieredstore',
        'user': 'user',
        'worker': 'worker'
    }

    def __init__(self, fuse=None, hadoop_config=None, jindo_version=None, labels=None, log_config=None, master=None, networkmode=None, properties=None, replicas=None, run_as=None, secret=None, tieredstore=None, user=None, worker=None, _configuration=None):  # noqa: E501
        """JindoRuntimeSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._fuse = None
        self._hadoop_config = None
        self._jindo_version = None
        self._labels = None
        self._log_config = None
        self._master = None
        self._networkmode = None
        self._properties = None
        self._replicas = None
        self._run_as = None
        self._secret = None
        self._tieredstore = None
        self._user = None
        self._worker = None
        self.discriminator = None

        if fuse is not None:
            self.fuse = fuse
        if hadoop_config is not None:
            self.hadoop_config = hadoop_config
        if jindo_version is not None:
            self.jindo_version = jindo_version
        if labels is not None:
            self.labels = labels
        if log_config is not None:
            self.log_config = log_config
        if master is not None:
            self.master = master
        if networkmode is not None:
            self.networkmode = networkmode
        if properties is not None:
            self.properties = properties
        if replicas is not None:
            self.replicas = replicas
        if run_as is not None:
            self.run_as = run_as
        if secret is not None:
            self.secret = secret
        if tieredstore is not None:
            self.tieredstore = tieredstore
        if user is not None:
            self.user = user
        if worker is not None:
            self.worker = worker

    @property
    def fuse(self):
        """Gets the fuse of this JindoRuntimeSpec.  # noqa: E501

        The component spec of Jindo Fuse  # noqa: E501

        :return: The fuse of this JindoRuntimeSpec.  # noqa: E501
        :rtype: JindoFuseSpec
        """
        return self._fuse

    @fuse.setter
    def fuse(self, fuse):
        """Sets the fuse of this JindoRuntimeSpec.

        The component spec of Jindo Fuse  # noqa: E501

        :param fuse: The fuse of this JindoRuntimeSpec.  # noqa: E501
        :type: JindoFuseSpec
        """

        self._fuse = fuse

    @property
    def hadoop_config(self):
        """Gets the hadoop_config of this JindoRuntimeSpec.  # noqa: E501

        Name of the configMap used to support HDFS configurations when using HDFS as Jindo's UFS. The configMap must be in the same namespace with the JindoRuntime. The configMap should contain user-specific HDFS conf files in it. For now, only \"hdfs-site.xml\" and \"core-site.xml\" are supported. It must take the filename of the conf file as the key and content of the file as the value.  # noqa: E501

        :return: The hadoop_config of this JindoRuntimeSpec.  # noqa: E501
        :rtype: str
        """
        return self._hadoop_config

    @hadoop_config.setter
    def hadoop_config(self, hadoop_config):
        """Sets the hadoop_config of this JindoRuntimeSpec.

        Name of the configMap used to support HDFS configurations when using HDFS as Jindo's UFS. The configMap must be in the same namespace with the JindoRuntime. The configMap should contain user-specific HDFS conf files in it. For now, only \"hdfs-site.xml\" and \"core-site.xml\" are supported. It must take the filename of the conf file as the key and content of the file as the value.  # noqa: E501

        :param hadoop_config: The hadoop_config of this JindoRuntimeSpec.  # noqa: E501
        :type: str
        """

        self._hadoop_config = hadoop_config

    @property
    def jindo_version(self):
        """Gets the jindo_version of this JindoRuntimeSpec.  # noqa: E501

        The version information that instructs fluid to orchestrate a particular version of Jindo.  # noqa: E501

        :return: The jindo_version of this JindoRuntimeSpec.  # noqa: E501
        :rtype: VersionSpec
        """
        return self._jindo_version

    @jindo_version.setter
    def jindo_version(self, jindo_version):
        """Sets the jindo_version of this JindoRuntimeSpec.

        The version information that instructs fluid to orchestrate a particular version of Jindo.  # noqa: E501

        :param jindo_version: The jindo_version of this JindoRuntimeSpec.  # noqa: E501
        :type: VersionSpec
        """

        self._jindo_version = jindo_version

    @property
    def labels(self):
        """Gets the labels of this JindoRuntimeSpec.  # noqa: E501

        Labels will be added on all the JindoFS pods.  # noqa: E501

        :return: The labels of this JindoRuntimeSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this JindoRuntimeSpec.

        Labels will be added on all the JindoFS pods.  # noqa: E501

        :param labels: The labels of this JindoRuntimeSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def log_config(self):
        """Gets the log_config of this JindoRuntimeSpec.  # noqa: E501


        :return: The log_config of this JindoRuntimeSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._log_config

    @log_config.setter
    def log_config(self, log_config):
        """Sets the log_config of this JindoRuntimeSpec.


        :param log_config: The log_config of this JindoRuntimeSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._log_config = log_config

    @property
    def master(self):
        """Gets the master of this JindoRuntimeSpec.  # noqa: E501

        The component spec of Jindo master  # noqa: E501

        :return: The master of this JindoRuntimeSpec.  # noqa: E501
        :rtype: JindoCompTemplateSpec
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this JindoRuntimeSpec.

        The component spec of Jindo master  # noqa: E501

        :param master: The master of this JindoRuntimeSpec.  # noqa: E501
        :type: JindoCompTemplateSpec
        """

        self._master = master

    @property
    def networkmode(self):
        """Gets the networkmode of this JindoRuntimeSpec.  # noqa: E501

        Whether to use hostnetwork or not  # noqa: E501

        :return: The networkmode of this JindoRuntimeSpec.  # noqa: E501
        :rtype: str
        """
        return self._networkmode

    @networkmode.setter
    def networkmode(self, networkmode):
        """Sets the networkmode of this JindoRuntimeSpec.

        Whether to use hostnetwork or not  # noqa: E501

        :param networkmode: The networkmode of this JindoRuntimeSpec.  # noqa: E501
        :type: str
        """

        self._networkmode = networkmode

    @property
    def properties(self):
        """Gets the properties of this JindoRuntimeSpec.  # noqa: E501

        Configurable properties for Jindo system. <br>  # noqa: E501

        :return: The properties of this JindoRuntimeSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this JindoRuntimeSpec.

        Configurable properties for Jindo system. <br>  # noqa: E501

        :param properties: The properties of this JindoRuntimeSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def replicas(self):
        """Gets the replicas of this JindoRuntimeSpec.  # noqa: E501

        The replicas of the worker, need to be specified  # noqa: E501

        :return: The replicas of this JindoRuntimeSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this JindoRuntimeSpec.

        The replicas of the worker, need to be specified  # noqa: E501

        :param replicas: The replicas of this JindoRuntimeSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def run_as(self):
        """Gets the run_as of this JindoRuntimeSpec.  # noqa: E501

        Manage the user to run Jindo Runtime  # noqa: E501

        :return: The run_as of this JindoRuntimeSpec.  # noqa: E501
        :rtype: User
        """
        return self._run_as

    @run_as.setter
    def run_as(self, run_as):
        """Sets the run_as of this JindoRuntimeSpec.

        Manage the user to run Jindo Runtime  # noqa: E501

        :param run_as: The run_as of this JindoRuntimeSpec.  # noqa: E501
        :type: User
        """

        self._run_as = run_as

    @property
    def secret(self):
        """Gets the secret of this JindoRuntimeSpec.  # noqa: E501


        :return: The secret of this JindoRuntimeSpec.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this JindoRuntimeSpec.


        :param secret: The secret of this JindoRuntimeSpec.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def tieredstore(self):
        """Gets the tieredstore of this JindoRuntimeSpec.  # noqa: E501

        Tiered storage used by Jindo  # noqa: E501

        :return: The tieredstore of this JindoRuntimeSpec.  # noqa: E501
        :rtype: TieredStore
        """
        return self._tieredstore

    @tieredstore.setter
    def tieredstore(self, tieredstore):
        """Sets the tieredstore of this JindoRuntimeSpec.

        Tiered storage used by Jindo  # noqa: E501

        :param tieredstore: The tieredstore of this JindoRuntimeSpec.  # noqa: E501
        :type: TieredStore
        """

        self._tieredstore = tieredstore

    @property
    def user(self):
        """Gets the user of this JindoRuntimeSpec.  # noqa: E501


        :return: The user of this JindoRuntimeSpec.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JindoRuntimeSpec.


        :param user: The user of this JindoRuntimeSpec.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def worker(self):
        """Gets the worker of this JindoRuntimeSpec.  # noqa: E501

        The component spec of Jindo worker  # noqa: E501

        :return: The worker of this JindoRuntimeSpec.  # noqa: E501
        :rtype: JindoCompTemplateSpec
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this JindoRuntimeSpec.

        The component spec of Jindo worker  # noqa: E501

        :param worker: The worker of this JindoRuntimeSpec.  # noqa: E501
        :type: JindoCompTemplateSpec
        """

        self._worker = worker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JindoRuntimeSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JindoRuntimeSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JindoRuntimeSpec):
            return True

        return self.to_dict() != other.to_dict()
