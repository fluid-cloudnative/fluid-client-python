# -*- coding: utf-8 -*-


import pprint

import six
from fluid.configuration import Configuration


class JindoCompTemplateSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'env': 'dict(str, str)',
        'labels': 'dict(str, str)',
        'node_selector': 'dict(str, str)',
        'ports': 'dict(str, int)',
        'properties': 'dict(str, str)',
        'replicas': 'int',
        'resources': 'V1ResourceRequirements',
        'tolerations': 'list[V1Toleration]'
    }

    attribute_map = {
        'env': 'env',
        'labels': 'labels',
        'node_selector': 'nodeSelector',
        'ports': 'ports',
        'properties': 'properties',
        'replicas': 'replicas',
        'resources': 'resources',
        'tolerations': 'tolerations'
    }

    def __init__(self, env=None, labels=None, node_selector=None, ports=None, properties=None, replicas=None, resources=None, tolerations=None, _configuration=None):  # noqa: E501
        """JindoCompTemplateSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._env = None
        self._labels = None
        self._node_selector = None
        self._ports = None
        self._properties = None
        self._replicas = None
        self._resources = None
        self._tolerations = None
        self.discriminator = None

        if env is not None:
            self.env = env
        if labels is not None:
            self.labels = labels
        if node_selector is not None:
            self.node_selector = node_selector
        if ports is not None:
            self.ports = ports
        if properties is not None:
            self.properties = properties
        if replicas is not None:
            self.replicas = replicas
        if resources is not None:
            self.resources = resources
        if tolerations is not None:
            self.tolerations = tolerations

    @property
    def env(self):
        """Gets the env of this JindoCompTemplateSpec.  # noqa: E501

        Environment variables that will be used by Jindo component. <br>  # noqa: E501

        :return: The env of this JindoCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this JindoCompTemplateSpec.

        Environment variables that will be used by Jindo component. <br>  # noqa: E501

        :param env: The env of this JindoCompTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._env = env

    @property
    def labels(self):
        """Gets the labels of this JindoCompTemplateSpec.  # noqa: E501

        Labels will be added on all the JindoFS Master or Worker pods. Any label already existed will be overriden  # noqa: E501

        :return: The labels of this JindoCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this JindoCompTemplateSpec.

        Labels will be added on all the JindoFS Master or Worker pods. Any label already existed will be overriden  # noqa: E501

        :param labels: The labels of this JindoCompTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def node_selector(self):
        """Gets the node_selector of this JindoCompTemplateSpec.  # noqa: E501

        NodeSelector is a selector which must be true for the master to fit on a node  # noqa: E501

        :return: The node_selector of this JindoCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this JindoCompTemplateSpec.

        NodeSelector is a selector which must be true for the master to fit on a node  # noqa: E501

        :param node_selector: The node_selector of this JindoCompTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def ports(self):
        """Gets the ports of this JindoCompTemplateSpec.  # noqa: E501


        :return: The ports of this JindoCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this JindoCompTemplateSpec.


        :param ports: The ports of this JindoCompTemplateSpec.  # noqa: E501
        :type: dict(str, int)
        """

        self._ports = ports

    @property
    def properties(self):
        """Gets the properties of this JindoCompTemplateSpec.  # noqa: E501

        Configurable properties for the Jindo component. <br>  # noqa: E501

        :return: The properties of this JindoCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this JindoCompTemplateSpec.

        Configurable properties for the Jindo component. <br>  # noqa: E501

        :param properties: The properties of this JindoCompTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def replicas(self):
        """Gets the replicas of this JindoCompTemplateSpec.  # noqa: E501

        Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster  # noqa: E501

        :return: The replicas of this JindoCompTemplateSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this JindoCompTemplateSpec.

        Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster  # noqa: E501

        :param replicas: The replicas of this JindoCompTemplateSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def resources(self):
        """Gets the resources of this JindoCompTemplateSpec.  # noqa: E501

        Resources that will be requested by the Jindo component. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.  # noqa: E501

        :return: The resources of this JindoCompTemplateSpec.  # noqa: E501
        :rtype: V1ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this JindoCompTemplateSpec.

        Resources that will be requested by the Jindo component. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.  # noqa: E501

        :param resources: The resources of this JindoCompTemplateSpec.  # noqa: E501
        :type: V1ResourceRequirements
        """

        self._resources = resources

    @property
    def tolerations(self):
        """Gets the tolerations of this JindoCompTemplateSpec.  # noqa: E501

        If specified, the pod's tolerations.  # noqa: E501

        :return: The tolerations of this JindoCompTemplateSpec.  # noqa: E501
        :rtype: list[V1Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this JindoCompTemplateSpec.

        If specified, the pod's tolerations.  # noqa: E501

        :param tolerations: The tolerations of this JindoCompTemplateSpec.  # noqa: E501
        :type: list[V1Toleration]
        """

        self._tolerations = tolerations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JindoCompTemplateSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JindoCompTemplateSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JindoCompTemplateSpec):
            return True

        return self.to_dict() != other.to_dict()
