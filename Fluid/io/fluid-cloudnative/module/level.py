# coding: utf-8

"""
    fluid

    client for fluid  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from Fluid.io.fluid-cloudnative.module.k8s_io_apimachinery_pkg_api_resource_quantity import K8sIoApimachineryPkgApiResourceQuantity  # noqa: F401,E501


class Level(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'high': 'str',
        'low': 'str',
        'mediumtype': 'str',
        'path': 'str',
        'quota': 'K8sIoApimachineryPkgApiResourceQuantity',
        'quota_list': 'str'
    }

    attribute_map = {
        'high': 'high',
        'low': 'low',
        'mediumtype': 'mediumtype',
        'path': 'path',
        'quota': 'quota',
        'quota_list': 'quotaList'
    }

    def __init__(self, high=None, low=None, mediumtype=None, path=None, quota=None, quota_list=None):  # noqa: E501
        """Level - a model defined in Swagger"""  # noqa: E501

        self._high = None
        self._low = None
        self._mediumtype = None
        self._path = None
        self._quota = None
        self._quota_list = None
        self.discriminator = None

        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        self.mediumtype = mediumtype
        if path is not None:
            self.path = path
        if quota is not None:
            self.quota = quota
        if quota_list is not None:
            self.quota_list = quota_list

    @property
    def high(self):
        """Gets the high of this Level.  # noqa: E501

        Ratio of high watermark of the tier (e.g. 0.9)  # noqa: E501

        :return: The high of this Level.  # noqa: E501
        :rtype: str
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this Level.

        Ratio of high watermark of the tier (e.g. 0.9)  # noqa: E501

        :param high: The high of this Level.  # noqa: E501
        :type: str
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this Level.  # noqa: E501

        Ratio of low watermark of the tier (e.g. 0.7)  # noqa: E501

        :return: The low of this Level.  # noqa: E501
        :rtype: str
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this Level.

        Ratio of low watermark of the tier (e.g. 0.7)  # noqa: E501

        :param low: The low of this Level.  # noqa: E501
        :type: str
        """

        self._low = low

    @property
    def mediumtype(self):
        """Gets the mediumtype of this Level.  # noqa: E501

        Medium Type of the tier. One of the three types: `MEM`, `SSD`, `HDD`  # noqa: E501

        :return: The mediumtype of this Level.  # noqa: E501
        :rtype: str
        """
        return self._mediumtype

    @mediumtype.setter
    def mediumtype(self, mediumtype):
        """Sets the mediumtype of this Level.

        Medium Type of the tier. One of the three types: `MEM`, `SSD`, `HDD`  # noqa: E501

        :param mediumtype: The mediumtype of this Level.  # noqa: E501
        :type: str
        """
        if mediumtype is None:
            raise ValueError("Invalid value for `mediumtype`, must not be `None`")  # noqa: E501

        self._mediumtype = mediumtype

    @property
    def path(self):
        """Gets the path of this Level.  # noqa: E501

        File paths to be used for the tier. Multiple paths are supported. Multiple paths should be separated with comma. For example: \"/mnt/cache1,/mnt/cache2\".  # noqa: E501

        :return: The path of this Level.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Level.

        File paths to be used for the tier. Multiple paths are supported. Multiple paths should be separated with comma. For example: \"/mnt/cache1,/mnt/cache2\".  # noqa: E501

        :param path: The path of this Level.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def quota(self):
        """Gets the quota of this Level.  # noqa: E501

        Quota for the whole tier. (e.g. 100Gi) Please note that if there're multiple paths used for this tierstore, the quota will be equally divided into these paths. If you'd like to set quota for each, path, see QuotaList for more information.  # noqa: E501

        :return: The quota of this Level.  # noqa: E501
        :rtype: K8sIoApimachineryPkgApiResourceQuantity
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this Level.

        Quota for the whole tier. (e.g. 100Gi) Please note that if there're multiple paths used for this tierstore, the quota will be equally divided into these paths. If you'd like to set quota for each, path, see QuotaList for more information.  # noqa: E501

        :param quota: The quota of this Level.  # noqa: E501
        :type: K8sIoApimachineryPkgApiResourceQuantity
        """

        self._quota = quota

    @property
    def quota_list(self):
        """Gets the quota_list of this Level.  # noqa: E501

        QuotaList are quotas used to set quota on multiple paths. Quotas should be separated with comma. Quotas in this list will be set to paths with the same order in Path. For example, with Path defined with \"/mnt/cache1,/mnt/cache2\" and QuotaList set to \"100Gi, 50Gi\", then we get 100GiB cache storage under \"/mnt/cache1\" and 50GiB under \"/mnt/cache2\". Also note that num of quotas must be consistent with the num of paths defined in Path.  # noqa: E501

        :return: The quota_list of this Level.  # noqa: E501
        :rtype: str
        """
        return self._quota_list

    @quota_list.setter
    def quota_list(self, quota_list):
        """Sets the quota_list of this Level.

        QuotaList are quotas used to set quota on multiple paths. Quotas should be separated with comma. Quotas in this list will be set to paths with the same order in Path. For example, with Path defined with \"/mnt/cache1,/mnt/cache2\" and QuotaList set to \"100Gi, 50Gi\", then we get 100GiB cache storage under \"/mnt/cache1\" and 50GiB under \"/mnt/cache2\". Also note that num of quotas must be consistent with the num of paths defined in Path.  # noqa: E501

        :param quota_list: The quota_list of this Level.  # noqa: E501
        :type: str
        """

        self._quota_list = quota_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Level, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Level):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
