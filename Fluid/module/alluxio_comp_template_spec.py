# -*- coding: utf-8 -*-


import pprint

import six
from fluid.configuration import Configuration


class AlluxioCompTemplateSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'env': 'dict(str, str)',
        'jvm_options': 'list[str]',
        'node_selector': 'dict(str, str)',
        'ports': 'dict(str, int)',
        'properties': 'dict(str, str)',
        'replicas': 'int',
        'resources': 'V1ResourceRequirements'
    }

    attribute_map = {
        'enabled': 'enabled',
        'env': 'env',
        'jvm_options': 'jvmOptions',
        'node_selector': 'nodeSelector',
        'ports': 'ports',
        'properties': 'properties',
        'replicas': 'replicas',
        'resources': 'resources'
    }

    def __init__(self, enabled=None, env=None, jvm_options=None, node_selector=None, ports=None, properties=None, replicas=None, resources=None, _configuration=None):  # noqa: E501
        """AlluxioCompTemplateSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled = None
        self._env = None
        self._jvm_options = None
        self._node_selector = None
        self._ports = None
        self._properties = None
        self._replicas = None
        self._resources = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if env is not None:
            self.env = env
        if jvm_options is not None:
            self.jvm_options = jvm_options
        if node_selector is not None:
            self.node_selector = node_selector
        if ports is not None:
            self.ports = ports
        if properties is not None:
            self.properties = properties
        if replicas is not None:
            self.replicas = replicas
        if resources is not None:
            self.resources = resources

    @property
    def enabled(self):
        """Gets the enabled of this AlluxioCompTemplateSpec.  # noqa: E501

        Enabled or Disabled for the components. For now, only  API Gateway is enabled or disabled.  # noqa: E501

        :return: The enabled of this AlluxioCompTemplateSpec.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AlluxioCompTemplateSpec.

        Enabled or Disabled for the components. For now, only  API Gateway is enabled or disabled.  # noqa: E501

        :param enabled: The enabled of this AlluxioCompTemplateSpec.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def env(self):
        """Gets the env of this AlluxioCompTemplateSpec.  # noqa: E501

        Environment variables that will be used by Alluxio component. <br>  # noqa: E501

        :return: The env of this AlluxioCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this AlluxioCompTemplateSpec.

        Environment variables that will be used by Alluxio component. <br>  # noqa: E501

        :param env: The env of this AlluxioCompTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._env = env

    @property
    def jvm_options(self):
        """Gets the jvm_options of this AlluxioCompTemplateSpec.  # noqa: E501

        Options for JVM  # noqa: E501

        :return: The jvm_options of this AlluxioCompTemplateSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._jvm_options

    @jvm_options.setter
    def jvm_options(self, jvm_options):
        """Sets the jvm_options of this AlluxioCompTemplateSpec.

        Options for JVM  # noqa: E501

        :param jvm_options: The jvm_options of this AlluxioCompTemplateSpec.  # noqa: E501
        :type: list[str]
        """

        self._jvm_options = jvm_options

    @property
    def node_selector(self):
        """Gets the node_selector of this AlluxioCompTemplateSpec.  # noqa: E501

        NodeSelector is a selector which must be true for the master to fit on a node  # noqa: E501

        :return: The node_selector of this AlluxioCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this AlluxioCompTemplateSpec.

        NodeSelector is a selector which must be true for the master to fit on a node  # noqa: E501

        :param node_selector: The node_selector of this AlluxioCompTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def ports(self):
        """Gets the ports of this AlluxioCompTemplateSpec.  # noqa: E501

        Ports used by Alluxio(e.g. rpc: 19998 for master)  # noqa: E501

        :return: The ports of this AlluxioCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this AlluxioCompTemplateSpec.

        Ports used by Alluxio(e.g. rpc: 19998 for master)  # noqa: E501

        :param ports: The ports of this AlluxioCompTemplateSpec.  # noqa: E501
        :type: dict(str, int)
        """

        self._ports = ports

    @property
    def properties(self):
        """Gets the properties of this AlluxioCompTemplateSpec.  # noqa: E501

        Configurable properties for the Alluxio component. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Alluxio Configuration Properties</a> for more info  # noqa: E501

        :return: The properties of this AlluxioCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this AlluxioCompTemplateSpec.

        Configurable properties for the Alluxio component. <br> Refer to <a href=\"https://docs.alluxio.io/os/user/stable/en/reference/Properties-List.html\">Alluxio Configuration Properties</a> for more info  # noqa: E501

        :param properties: The properties of this AlluxioCompTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def replicas(self):
        """Gets the replicas of this AlluxioCompTemplateSpec.  # noqa: E501

        Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster  # noqa: E501

        :return: The replicas of this AlluxioCompTemplateSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this AlluxioCompTemplateSpec.

        Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster  # noqa: E501

        :param replicas: The replicas of this AlluxioCompTemplateSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def resources(self):
        """Gets the resources of this AlluxioCompTemplateSpec.  # noqa: E501

        Resources that will be requested by the Alluxio component. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.  # noqa: E501

        :return: The resources of this AlluxioCompTemplateSpec.  # noqa: E501
        :rtype: V1ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this AlluxioCompTemplateSpec.

        Resources that will be requested by the Alluxio component. <br> <br> Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.  # noqa: E501

        :param resources: The resources of this AlluxioCompTemplateSpec.  # noqa: E501
        :type: V1ResourceRequirements
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlluxioCompTemplateSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlluxioCompTemplateSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlluxioCompTemplateSpec):
            return True

        return self.to_dict() != other.to_dict()
