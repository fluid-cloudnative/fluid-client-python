# coding: utf-8

"""
    fluid

    client for fluid  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fluid.configuration import Configuration


class ThinRuntimeProfileSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_system_type': 'str',
        'fuse': 'ThinFuseSpec',
        'node_publish_secret_policy': 'str',
        'volumes': 'list[V1Volume]',
        'worker': 'ThinCompTemplateSpec'
    }

    attribute_map = {
        'file_system_type': 'fileSystemType',
        'fuse': 'fuse',
        'node_publish_secret_policy': 'nodePublishSecretPolicy',
        'volumes': 'volumes',
        'worker': 'worker'
    }

    def __init__(self, file_system_type='', fuse=None, node_publish_secret_policy=None, volumes=None, worker=None, local_vars_configuration=None):  # noqa: E501
        """ThinRuntimeProfileSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_system_type = None
        self._fuse = None
        self._node_publish_secret_policy = None
        self._volumes = None
        self._worker = None
        self.discriminator = None

        self.file_system_type = file_system_type
        if fuse is not None:
            self.fuse = fuse
        if node_publish_secret_policy is not None:
            self.node_publish_secret_policy = node_publish_secret_policy
        if volumes is not None:
            self.volumes = volumes
        if worker is not None:
            self.worker = worker

    @property
    def file_system_type(self):
        """Gets the file_system_type of this ThinRuntimeProfileSpec.  # noqa: E501

        file system of thinRuntime  # noqa: E501

        :return: The file_system_type of this ThinRuntimeProfileSpec.  # noqa: E501
        :rtype: str
        """
        return self._file_system_type

    @file_system_type.setter
    def file_system_type(self, file_system_type):
        """Sets the file_system_type of this ThinRuntimeProfileSpec.

        file system of thinRuntime  # noqa: E501

        :param file_system_type: The file_system_type of this ThinRuntimeProfileSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_system_type is None:  # noqa: E501
            raise ValueError("Invalid value for `file_system_type`, must not be `None`")  # noqa: E501

        self._file_system_type = file_system_type

    @property
    def fuse(self):
        """Gets the fuse of this ThinRuntimeProfileSpec.  # noqa: E501


        :return: The fuse of this ThinRuntimeProfileSpec.  # noqa: E501
        :rtype: ThinFuseSpec
        """
        return self._fuse

    @fuse.setter
    def fuse(self, fuse):
        """Sets the fuse of this ThinRuntimeProfileSpec.


        :param fuse: The fuse of this ThinRuntimeProfileSpec.  # noqa: E501
        :type: ThinFuseSpec
        """

        self._fuse = fuse

    @property
    def node_publish_secret_policy(self):
        """Gets the node_publish_secret_policy of this ThinRuntimeProfileSpec.  # noqa: E501

        NodePublishSecretPolicy describes the policy to decide which to do with node publish secret when mounting an existing persistent volume.  # noqa: E501

        :return: The node_publish_secret_policy of this ThinRuntimeProfileSpec.  # noqa: E501
        :rtype: str
        """
        return self._node_publish_secret_policy

    @node_publish_secret_policy.setter
    def node_publish_secret_policy(self, node_publish_secret_policy):
        """Sets the node_publish_secret_policy of this ThinRuntimeProfileSpec.

        NodePublishSecretPolicy describes the policy to decide which to do with node publish secret when mounting an existing persistent volume.  # noqa: E501

        :param node_publish_secret_policy: The node_publish_secret_policy of this ThinRuntimeProfileSpec.  # noqa: E501
        :type: str
        """

        self._node_publish_secret_policy = node_publish_secret_policy

    @property
    def volumes(self):
        """Gets the volumes of this ThinRuntimeProfileSpec.  # noqa: E501

        Volumes is the list of Kubernetes volumes that can be mounted by runtime components and/or fuses.  # noqa: E501

        :return: The volumes of this ThinRuntimeProfileSpec.  # noqa: E501
        :rtype: list[V1Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ThinRuntimeProfileSpec.

        Volumes is the list of Kubernetes volumes that can be mounted by runtime components and/or fuses.  # noqa: E501

        :param volumes: The volumes of this ThinRuntimeProfileSpec.  # noqa: E501
        :type: list[V1Volume]
        """

        self._volumes = volumes

    @property
    def worker(self):
        """Gets the worker of this ThinRuntimeProfileSpec.  # noqa: E501


        :return: The worker of this ThinRuntimeProfileSpec.  # noqa: E501
        :rtype: ThinCompTemplateSpec
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this ThinRuntimeProfileSpec.


        :param worker: The worker of this ThinRuntimeProfileSpec.  # noqa: E501
        :type: ThinCompTemplateSpec
        """

        self._worker = worker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThinRuntimeProfileSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ThinRuntimeProfileSpec):
            return True

        return self.to_dict() != other.to_dict()
