# coding: utf-8

"""
    fluid

    client for fluid  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from fluid.configuration import Configuration


class EFCCompTemplateSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'disabled': 'bool',
        'network_mode': 'str',
        'node_selector': 'dict(str, str)',
        'pod_metadata': 'PodMetadata',
        'ports': 'dict(str, int)',
        'properties': 'dict(str, str)',
        'replicas': 'int',
        'resources': 'V1ResourceRequirements',
        'version': 'VersionSpec'
    }

    attribute_map = {
        'disabled': 'disabled',
        'network_mode': 'networkMode',
        'node_selector': 'nodeSelector',
        'pod_metadata': 'podMetadata',
        'ports': 'ports',
        'properties': 'properties',
        'replicas': 'replicas',
        'resources': 'resources',
        'version': 'version'
    }

    def __init__(self, disabled=None, network_mode=None, node_selector=None, pod_metadata=None, ports=None, properties=None, replicas=None, resources=None, version=None, local_vars_configuration=None):  # noqa: E501
        """EFCCompTemplateSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._disabled = None
        self._network_mode = None
        self._node_selector = None
        self._pod_metadata = None
        self._ports = None
        self._properties = None
        self._replicas = None
        self._resources = None
        self._version = None
        self.discriminator = None

        if disabled is not None:
            self.disabled = disabled
        if network_mode is not None:
            self.network_mode = network_mode
        if node_selector is not None:
            self.node_selector = node_selector
        if pod_metadata is not None:
            self.pod_metadata = pod_metadata
        if ports is not None:
            self.ports = ports
        if properties is not None:
            self.properties = properties
        if replicas is not None:
            self.replicas = replicas
        if resources is not None:
            self.resources = resources
        if version is not None:
            self.version = version

    @property
    def disabled(self):
        """Gets the disabled of this EFCCompTemplateSpec.  # noqa: E501

        Enabled or Disabled for the components. Default enable.  # noqa: E501

        :return: The disabled of this EFCCompTemplateSpec.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this EFCCompTemplateSpec.

        Enabled or Disabled for the components. Default enable.  # noqa: E501

        :param disabled: The disabled of this EFCCompTemplateSpec.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def network_mode(self):
        """Gets the network_mode of this EFCCompTemplateSpec.  # noqa: E501

        Whether to use host network or not.  # noqa: E501

        :return: The network_mode of this EFCCompTemplateSpec.  # noqa: E501
        :rtype: str
        """
        return self._network_mode

    @network_mode.setter
    def network_mode(self, network_mode):
        """Sets the network_mode of this EFCCompTemplateSpec.

        Whether to use host network or not.  # noqa: E501

        :param network_mode: The network_mode of this EFCCompTemplateSpec.  # noqa: E501
        :type: str
        """

        self._network_mode = network_mode

    @property
    def node_selector(self):
        """Gets the node_selector of this EFCCompTemplateSpec.  # noqa: E501

        NodeSelector is a selector which must be true for the component to fit on a node.  # noqa: E501

        :return: The node_selector of this EFCCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this EFCCompTemplateSpec.

        NodeSelector is a selector which must be true for the component to fit on a node.  # noqa: E501

        :param node_selector: The node_selector of this EFCCompTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def pod_metadata(self):
        """Gets the pod_metadata of this EFCCompTemplateSpec.  # noqa: E501


        :return: The pod_metadata of this EFCCompTemplateSpec.  # noqa: E501
        :rtype: PodMetadata
        """
        return self._pod_metadata

    @pod_metadata.setter
    def pod_metadata(self, pod_metadata):
        """Sets the pod_metadata of this EFCCompTemplateSpec.


        :param pod_metadata: The pod_metadata of this EFCCompTemplateSpec.  # noqa: E501
        :type: PodMetadata
        """

        self._pod_metadata = pod_metadata

    @property
    def ports(self):
        """Gets the ports of this EFCCompTemplateSpec.  # noqa: E501

        Ports used by EFC(e.g. rpc: 19998 for master).  # noqa: E501

        :return: The ports of this EFCCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this EFCCompTemplateSpec.

        Ports used by EFC(e.g. rpc: 19998 for master).  # noqa: E501

        :param ports: The ports of this EFCCompTemplateSpec.  # noqa: E501
        :type: dict(str, int)
        """

        self._ports = ports

    @property
    def properties(self):
        """Gets the properties of this EFCCompTemplateSpec.  # noqa: E501

        Configurable properties for the EFC component.  # noqa: E501

        :return: The properties of this EFCCompTemplateSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this EFCCompTemplateSpec.

        Configurable properties for the EFC component.  # noqa: E501

        :param properties: The properties of this EFCCompTemplateSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def replicas(self):
        """Gets the replicas of this EFCCompTemplateSpec.  # noqa: E501

        Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster  # noqa: E501

        :return: The replicas of this EFCCompTemplateSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this EFCCompTemplateSpec.

        Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1. replicas is the min replicas of dataset in the cluster  # noqa: E501

        :param replicas: The replicas of this EFCCompTemplateSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def resources(self):
        """Gets the resources of this EFCCompTemplateSpec.  # noqa: E501


        :return: The resources of this EFCCompTemplateSpec.  # noqa: E501
        :rtype: V1ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this EFCCompTemplateSpec.


        :param resources: The resources of this EFCCompTemplateSpec.  # noqa: E501
        :type: V1ResourceRequirements
        """

        self._resources = resources

    @property
    def version(self):
        """Gets the version of this EFCCompTemplateSpec.  # noqa: E501


        :return: The version of this EFCCompTemplateSpec.  # noqa: E501
        :rtype: VersionSpec
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EFCCompTemplateSpec.


        :param version: The version of this EFCCompTemplateSpec.  # noqa: E501
        :type: VersionSpec
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EFCCompTemplateSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EFCCompTemplateSpec):
            return True

        return self.to_dict() != other.to_dict()
